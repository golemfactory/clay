- include_vars:
    file: site_settings.yml
    name: site_settings


- win_chocolatey:
    name: "{{ item.name }}"
    params: "{{ item.params|default('') }}"
    timeout: 5400
  with_items:
    - name: python3
    - name: git
      params: '"/GitAndUnixToolsOnPath"'
    - name: visualstudio2017community
    - name: microsoft-visual-cpp-build-tools
    - name: innosetup


- win_chocolatey:
    name: "{{ item.name }}"
    params: "{{ item.params|default('') }}"
    timeout: 5400
  with_items:
    - name: visualstudio2017-workload-nativedesktop
      params: "--includeOptional"

- name: install pypiwin32
  win_shell: py -3 -m pip install pypiwin32
  args:
    creates: C:\Python36\Scripts\pywin32_postinstall.py
  notify: pywin32 installed

- name: Ensure that winpy wintypes36.dll is in PATH
  win_path:
    elements:
      - 'C:\Python36\Lib\site-packages\pypiwin32_system32'
      - 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin'


- name: setup buildbot-worker user
  win_user:
    name: buildbot-worker
    password: "{{ vault_windows_worker_password }}"
    password_never_expires: yes
    user_cannot_change_password: yes


- name: add account to Log on as a service
  win_user_right:
    name: SeServiceLogonRight
    users:
    - '.\buildbot-worker'
    action: add


- name: install buildbot-worker
  win_shell: py -3 -m pip install buildbot-worker
  args:
    creates: C:\Python36\Scripts\buildbot-worker.exe


- name: create workspace for the buildbot worker
  become: yes
  become_user: buildbot-worker
  win_shell:
    py -3 C:\Python36\Scripts\buildbot-worker.exe create-worker
      C:\BuildbotWorker
      "{{worker_master_hostname}}"
      "{{worker_name}}"
      "{{site_settings.worker_pass}}"
  args:
    creates: C:\BuildbotWorker


- name: create the BuildResources directory
  win_file:
    path: 'C:\BuildResources'
    state: directory


# wheel mirrored from http://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32
- name: download resources for the build tasks
  win_get_url:
    url: 'https://s3.amazonaws.com/golem-buildbot-build-resources/pywin32-221-cp36-cp36m-win_amd64.whl'
    dest: 'C:\BuildResources\pywin32-221-cp36-cp36m-win_amd64.whl'
    force: no


- name: check if hyperg installed
  win_stat:
    path: C:\BuildResources\hyperg
  register: hyperg_exists


- name: download hyperg for the build tasks
  win_get_url:
    url: https://github.com/mfranciszkiewicz/golem-hyperdrive/releases/download/v0.2.3/hyperg_0.2.3_windows-x64.zip
    dest: C:\BuildResources\hyperg_0.2.3_windows-x64.zip
    force: no
  when: not hyperg_exists.stat.exists


- name: unzip hyperg for the build tasks
  win_unzip:
    src: C:\BuildResources\hyperg_0.2.3_windows-x64.zip
    dest: C:\BuildResources
    delete_archive: yes
  when: not hyperg_exists.stat.exists


- name: check if geth installed
  win_stat:
    path: C:\BuildResources\geth-windows-amd64-1.7.2-1db4ecdc
  register: geth_exists


- name: download geth for the build tasks
  win_get_url:
    url: https://gethstore.blob.core.windows.net/builds/geth-windows-amd64-1.7.2-1db4ecdc.zip
    dest: C:\BuildResources\geth-windows-amd64-1.7.2-1db4ecdc.zip
    force: no
  when: not geth_exists.stat.exists

- name: unzip geth for the build tasks
  win_unzip:
    src: C:\BuildResources\geth-windows-amd64-1.7.2-1db4ecdc.zip
    dest: C:\BuildResources
    delete_archive: yes
  when: not geth_exists.stat.exists


- name: check if electron installed
  win_stat:
    path: C:\BuildResources\win-unpacked
  register: electron_exists

- name: download electron for the build tasks
  win_get_url:
    url: https://github.com/golemfactory/golem-electron/releases/download/0.1.4/win-unpacked.zip
    dest: C:\BuildResources\win-unpacked.zip
    force: no
  when: not electron_exists.stat.exists

- name: unzip electron for the build tasks
  win_unzip:
    src: C:\BuildResources\win-unpacked.zip
    dest: C:\BuildResources
    delete_archive: yes
  when: not electron_exists.stat.exists


- name: download docker_toolbox for the build tasks
  win_get_url:
    url: https://download.docker.com/win/stable/DockerToolbox.exe
    dest: C:\BuildResources\DockerToolbox.exe
    force: no
  args:
    creates: C:\BuildResources\DockerToolbox.exe


- name: download vc_redist for the build tasks
  win_get_url:
    url: https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe
    dest: C:\BuildResources\vc_redist.x64.exe
    force: no
  args:
    creates: C:\BuildResources\vc_redist.x64.exe


- name: check if service is created
  win_shell: Get-Service -Name BuildBot -ErrorAction SilentlyContinue
  register: service_exists
  ignore_errors: yes


- name: create service for the buildbot worker
  win_shell:
    py -2 C:\Python27\Scripts\buildbot_worker_windows_service.exe
      --user .\buildbot-worker
      --password
      "{{ vault_windows_worker_password }}"
      --startup delayed
      install
  when: service_exists.rc == 1


- name: check if worker started once
  become: yes
  become_user: buildbot-worker
  ignore_errors: yes
  win_stat:
    path: C:\BuildbotWorker\twistd.log
  register: log_exists_raw

# Check for exists, stat fails when file is locked, meaning its there.
- set_fact:
    log_not_exists: " ( 'exception' in log_exists_raw and not log_exists_raw.exception ) or ( 'stat' in log_exists_raw and not log_exists_raw.stat.exists )"


- name: Start worker for first time
  become: yes
  become_user: buildbot-worker
  win_shell:
    Start-Process C:\Python36\Scripts\buildbot-worker.exe -ArgumentList "start","C:\BuildbotWorker"
  when: log_not_exists

- pause:
    seconds: 10
  when: log_not_exists


- name: Stop worker for first time
  become: yes
  become_user: buildbot-worker
  win_shell:
    Stop-Process -name buildbot-worker
  when: log_not_exists


- name: set registry key right
  win_acl:
    path: HKLM:\SYSTEM\CurrentControlSet\Services\BuildBot
    user: .\buildbot-worker
    rights: FullControl
    type: allow
    state: present
    inherit: ContainerInherit, ObjectInherit
    propagation: 'None'


- name: Create registry path BuildBot
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\services\BuildBot


- name: Create registry path BuildBot\Parameters
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\services\BuildBot\Parameters


- name: Add buildbot worker folder to registry
  win_regedit:
    path: HKLM:\SYSTEM\CurrentControlSet\services\BuildBot\Parameters
    name: directories
    data: C:\BuildbotWorker
    type: String


- name: start service
  win_service:
    name: BuildBot
    start_mode: delayed
    state: started
