###
### This scenario is supposed to be run in the Unix/Linux environment
### The following applications are required: 
###   imunes, ipfs, bwm-ng
###


export cwd    /bin/pwd

let bigfile   %{cwd}/shared/100MB

let task_path %{cwd}/testtask.json
let task_dest /root/task.json

let net       2nat-1-source-4-nodes.imn
let net_path  %{cwd}/networks/%{net}

let golem     /opt/golem
let title     ipfs
let ipfs      /usr/local/bin/ipfs
let results   imunes_results
let node_log  /tmp/gnr-node.log

# stop the simulation if running

stop

# setup local files and dirs

local /bin/bash -c "if [ ! -f %{bigfile} ]; then dd if=/dev/urandom of=%{bigfile} count=100 bs=1048576; fi"
local mkdir -p %{cwd}/%{results}/ifaces

# start the simulation

start %{net_path}

# dump node names and mapping

    node-map nm
    capture
        print %{nm}
    dump %{cwd}/%{results}/node.map

# read host nodes ip address

    ip-addr host host_addr
    ip-addr bootstrap bootstrap_addr

# patch /etc/hosts to recognize the 'localhost' name

    node ~switch,router    sh -c "echo '127.0.0.1 localhost' >> /etc/hosts"
    node ~switch,router    rm -rf /root/.local/golem

# init ipfs

    copy ~switch,router    %{ipfs} %{ipfs}
    node ~switch,router    %{ipfs} init -f
    
# update ipfs boostrap node

    node-export bootstrap  ipfs_id      sh -c "%{ipfs} id -f '<id>'"
    node host,pc           ipfs bootstrap add /ip4/%{bootstrap_addr}/tcp/4001/ipfs/%{ipfs_id}

# start daemons and wait for them to initialize

    node   ~switch,router  sh -c "echo 'nohup %{ipfs} daemon >/tmp/ipfs-daemon.log &' > /root/ipfs-daemon.sh"
    node-d ~switch,router  sh /root/ipfs-daemon.sh
    node   ~switch,router  sh -c "while ! grep 'Daemon is ready' /tmp/ipfs-daemon.log; do sleep 0.5; done"

# update golem code

    node host,pc    rm -rf /root/.local/golem
    node host,pc    rm -rf /opt/golem/golem

    copy host,pc    %{golem}/golem /opt/golem/golem
    copy host       %{bigfile} /opt/golem/gnr/task/scripts/100MB

    node pc         sh -c "rm -rf /opt/golem/gnr/benchmarks"

# configure nat

    nat router eth3 eth0

# start monitoring local interfaces

    ifaces local_ifaces
    for local_ifaces iface
        let cmd 'bwm-ng -o csv -c 0 -T rate -t 200 -u bytes -I %{iface} -F %{results}/ifaces/%{iface}.csv'
           # -d stands for 'detached' execution
        local-d /bin/bash -c '%{cmd}'
    endfor

# start the task host

    copy    host    %{task_path} %{task_dest}

    node    host    /bin/bash -c "echo 'cd /opt/golem && nohup python gui/node.py -t %{task_dest} >%{node_log} 2>&1 &' > /root/gnr-node.sh"
      # -d stands for 'detached' execution
    node-d  host    /bin/bash /root/gnr-node.sh

    sleep 15

# start worker nodes

    node    pc      /bin/bash -c "echo 'cd /opt/golem && nohup python gui/node.py -p %{host_addr}:40102 >%{node_log} 2>&1 &' > /root/gnr-node.sh"
      # -d stands for 'detached' execution
    node-d  pc      /bin/bash /root/gnr-node.sh

# wait for task's completion

    let step      2
    let timeout   300

    node    host    /bin/bash -c 'step=%{step};time=0; while test "$(grep Paying %{node_log})" == "" -a $time -lt %{timeout}; do sleep $step; let "time=time+%{step}"; done'

# stop monitoring local interfaces

    local killall bwm-ng

    sleep 5

# dump logs

    nodes imunes_nodes
    for imunes_nodes node
        capture
            node %{node} /bin/bash -c "if [ -f %{node_log} ]; then cat %{node_log}; fi"
        dump %{cwd}/%{results}/%{node}-%{title}-%{net}.log
    endfor

# stop the simulation
exit
